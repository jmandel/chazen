{"version":3,"sources":["ActionTypes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Gallery","audioContext","window","AudioContext","webkitAudioContext","GalleryNames","study","court","niche","bridge","defaultGalleryParam","location","hash","slice","defaultGallery","Object","keys","includes","defaultAppState","iteration","gallery","offset","modal","appStateReducer","state","action","type","console","log","undefined","debug","debugStatus","dialTo","duration","target","audio","pause","play","BorderProgress","x","y","remainingPerimeter","fractionComplete","pixels","forEach","p","i","Math","min","key","style","position","top","left","width","borderTop","right","height","borderRight","bottom","borderBottom","borderLeft","useGainedNode","useState","gain","node","setNode","useCallback","audioNode","getAudioElement","ref","s","l","document","getElementById","innerText","onerror","message","file","line","col","error","addEventListener","e","App","useReducer","dispatch","spanRef","useRef","audioElements","useEffect","destroy","setInterval","currentAudio","currentTime","previousIteration","currentIteration","floor","ITERATION_DURATION","clickGallery","clearInterval","domRect","current","getBoundingClientRect","atTime","nextAudio","g","className","onClick","map","loop","preload","controls","src","c","String","padStart","gridArea","targetTime","description","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fe7bda9.chunk.js","sourcesContent":["import { AudioFragment } from \"./AudioFragment\";\nimport { ItemProgress } from \"./DownloadManager\";\nimport { PlaybackStatus } from \"./PlaybackManager\";\n\nexport enum Gallery {\n  study,\n  court,\n  niche,\n  bridge,\n}\n\n\nexport type ActionTypes =\n  | { type: \"beginPlayback\" }\n  | { type: \"pickIteration\"; selectedIteration: number }\n  | { type: \"pickTime\"; subtype: \"a\"; selectedTime: number }\n  | { type: \"downloadStatus\"; progress: ItemProgress<AudioFragment>[] }\n  | { type: \"playbackStatus\"; offset: number }\n  | { type: \"dismissModal\"; }\n  | { type: \"requestGallery\"; gallery: Gallery }\n  | { type: \"requestIteration\"; iteration: number }\n  | { type: \"debug\"; debugStatus: number }\n  ;\n","import React, { useEffect, useReducer, useRef, useCallback, useState, Ref, RefObject } from \"react\";\nimport { ActionTypes, Gallery } from \"./ActionTypes\";\nimport \"./App.css\"\n\nconst audioContext: AudioContext = new ((window as any).AudioContext ||\n  (window as any).webkitAudioContext)();\n\ntype Modal = \"Welcome\" | \"Map\" | \"Passage\";\n\nconst GalleryNames: [string, Gallery][] = [\n  [\"Objects Study Room\", Gallery.study],\n  [\"Paige Court\", Gallery.court],\n  [\"Japanese Niche\", Gallery.niche],\n  [\"Bridge\", Gallery.bridge],\n]\n\nconst defaultGalleryParam = window.location.hash.slice(1);\n\nconst defaultGallery: Gallery = Object.keys(Gallery).includes(defaultGalleryParam) ?\n  (Gallery as any)[defaultGalleryParam] : Gallery.study;\n\ntype AppState = {\n  iteration: number;\n  gallery: Gallery;\n  modal?: Modal;\n  offset: number;\n  debug?: number;\n};\n\nconst defaultAppState: AppState = {\n  iteration: 0,\n  gallery: defaultGallery,\n  offset: 0,\n  modal: \"Welcome\"\n};\n\nconst appStateReducer = (state: AppState, action: ActionTypes): AppState => {\n  if (action.type !== \"playbackStatus\")\n    console.log(state, action)\n  switch (action.type) {\n    case \"requestGallery\":\n      return { ...state, gallery: action.gallery };\n    case \"requestIteration\":\n      return { ...state, iteration: action.iteration || 0 };\n    case \"playbackStatus\":\n      return { ...state, offset: action.offset };\n    case \"dismissModal\":\n      return { ...state, modal: undefined };\n    case \"debug\":\n      return {...state, debug: (state.debug || 0) + action.debugStatus}\n    default:\n      return state;\n  }\n};\n\nconst PARALLEL_DOWNLOADS = 3\nconst PROGRESS_INTERVAL_MS = 50\n\nconst dialTo = (duration: number, target: number, audio: HTMLAudioElement) => {\n  if (target == 0) {\n    audio.pause()\n    log(\"Audio pause\")\n  } else {\n    audio.play()\n    log(\"Audio play\")\n  }\n  //log(`Ramping ${duration}, ${target} ${gainNode}`)\n  //kgainNode.gain.setTargetAtTime(target, audioContext.currentTime, duration / 1000 / 3);\n  //gainNode.gain.value = target;\n}\n\n\nconst BorderProgress: React.FC<{ fractionComplete: number, x: number, y: number }> = (({ x, y, fractionComplete }) => {\n  let totalPerimeter = 2 * x + 2 * y - 40;\n  let remainingPerimeter = fractionComplete * totalPerimeter;\n  let pixels = [x - 10, y - 10, x - 10, y - 10];\n\n  pixels.forEach((p, i) => {\n    if (remainingPerimeter < p) {\n      pixels[i] = p = Math.min(p, remainingPerimeter)\n    }\n    remainingPerimeter -= p\n  })\n\n  const progressBorder = \"10px solid #bbbbbb\"\n  return <>\n    <div key=\"0\" style={{\n      position: \"absolute\",\n      top: 0,\n      left: 10,\n      width: `${pixels[0]}px`,\n      borderTop: progressBorder\n    }}></div>\n    <div key=\"1\" style={{\n      position: \"absolute\",\n      right: 0,\n      top: 10,\n      height: `${pixels[1]}px`,\n      borderRight: progressBorder\n    }}></div>\n    <div key=\"2\" style={{\n      position: \"absolute\",\n      bottom: 0,\n      right: 10,\n      width: `${pixels[2]}px`,\n      borderBottom: progressBorder\n    }}></div>\n    <div key=\"3\" style={{\n      position: \"absolute\",\n      left: 0,\n      bottom: 10,\n      height: `${pixels[3]}px`,\n      borderLeft: progressBorder\n    }}></div>\n  </>\n}\n)\n\nconst useGainedNode = () => {\n\n  const [gain, setGain] = useState<GainNode | null>(null);\n  const [node, setNode] = useState<HTMLAudioElement>();\n  const ref = useCallback((audioNode: HTMLAudioElement) => {\n    setNode(audioNode)\n  }, [])\n  return [ref, gain, node] as const\n}\n\nconst getAudioElement = (ref: any) => {\n  return ref[2] as (HTMLAudioElement | null)\n}\n\nconst log = (s: string) => {\n  const l = document.getElementById(\"log\")\n  l!.innerText = l!.innerText + \"\\n\" + s;\n}\n\nwindow.onerror = function (message, file, line, col, error) {\n  log(\"Error occurred: \" + (error as any).message);\n  return false;\n};\n\nwindow.addEventListener(\"error\", function (e) {\n  log(\"Error occurred: \" + e.error.message);\n  return false;\n})\n\nlog(\"LOG\")\nconsole.log(\"ACState\", audioContext.state)\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(appStateReducer, defaultAppState);\n\n  const spanRef = useRef<HTMLElement>(null);\n\n  const audioElements: Record<Gallery, readonly [Ref<HTMLAudioElement>, GainNode | null, HTMLAudioElement | undefined]> = {\n    [Gallery.study]: useGainedNode(),\n    [Gallery.court]: useGainedNode(),\n    [Gallery.niche]: useGainedNode(),\n    [Gallery.bridge]: useGainedNode()\n  };\n\n  useEffect(() => {\n    let destroy = setInterval(() => {\n      const currentAudio = getAudioElement(audioElements[state.gallery])\n      if (currentAudio) {\n\n        const offset = currentAudio.currentTime\n        const previousIteration = state.iteration\n        const currentIteration = Math.floor(offset / ITERATION_DURATION)\n        if (previousIteration !== currentIteration) {\n          console.log(\"Rollover iteration\", state.gallery, previousIteration, currentIteration)\n          dispatch({\n            type: \"requestIteration\",\n            iteration: currentIteration\n          })\n\n          if (currentIteration == 0) {\n            clickGallery(defaultGallery)\n          }\n        }\n\n        dispatch({\n          type: \"playbackStatus\",\n          offset\n        })\n      }\n    }, PROGRESS_INTERVAL_MS)\n\n    return () => {\n      clearInterval(destroy)\n    }\n  }, [state.gallery, state.iteration, audioElements[state.gallery][2]])\n\n  const ITERATION_DURATION = 64.32 // 76;\n  const LOOKBACK_ON_SWITCH = 0;\n  const VOLUME_RAMP_TIME = 500;\n\n  const fractionComplete = (state.offset % ITERATION_DURATION) / ITERATION_DURATION * 1\n  const iterationList: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n  let domRect = spanRef.current ? spanRef.current.getBoundingClientRect() : { width: 100, height: 100 }\n  let x = domRect.width;\n  let y = domRect.height;\n\n  const clickGallery = (gallery: Gallery) => {\n    const currentAudio = getAudioElement(audioElements[state.gallery]);\n    if (currentAudio) {\n      const atTime = currentAudio.currentTime;\n      log(\"Requeste gal at \" + atTime)\n      const nextAudio = getAudioElement(audioElements[gallery])!;\n      nextAudio.play()\n      nextAudio.currentTime = atTime\n      GalleryNames.forEach(([desc, g]) => {\n        g !== gallery && dialTo(VOLUME_RAMP_TIME, 0, audioElements[g][2]!)\n      })\n      dialTo(VOLUME_RAMP_TIME, 1, audioElements[gallery][2]!)\n\n      dispatch({\n        type: \"requestGallery\",\n        gallery\n      })\n    }\n  }\n  // iteration_duration = 64.32s\n  return (\n    <div className=\"App\">\n      {state.modal && <div className=\"modal\">\n        <div className=\"modal-content\">\n          <button\n            className=\"button start-button\"\n            onClick={() => {\n              const currentAudio = getAudioElement(audioElements[state.gallery])\n              if (currentAudio) {\n                GalleryNames.forEach(([desc, g]) => {\n                  dialTo(VOLUME_RAMP_TIME, 1, audioElements[g][2]!)\n                  dialTo(VOLUME_RAMP_TIME, 0, audioElements[g][2]!)\n                })\n\n                currentAudio.play()\n                //audioContext.resume().then(() => {\n                dispatch({ type: \"dismissModal\" })\n                //})\n              }\n            }}\n          >Begin</button>\n        </div></div>}\n\n      <div className=\"wrapper\">\n        <header className=\"header\">\n          {GalleryNames.map(([description, gallery]) => (\n            <audio key={gallery}\n              ref={audioElements[gallery][0]}\n              loop={true}\n              preload=\"auto\"\n              controls\n              src={`${Gallery[gallery]}.mp3`}\n              className=\"begin\" />\n          ))}\n        </header>\n        <div className=\"menu\"></div>\n        <div className=\"gutter\"></div>\n        {iterationList.map((i, c) => {\n\n          const src = `icon-${Gallery[state.gallery]}-${String(c).padStart(2, '0')}.svg`\n          const gridArea = `iteration${Math.floor(c / 4)}${c % 4}`\n          const className = `iteration \n                ${state.iteration === i ? \"playing\" : \"\"}\n                gallery-${state.gallery}\n              `;\n\n          return (\n            <span ref={c == 0 ? spanRef : null} key={c} className={className} style={{ gridArea }}>\n              {i === state.iteration && <BorderProgress x={x} y={y} fractionComplete={fractionComplete}></BorderProgress>}\n              <img src={src}\n                onClick={() => {\n                  const currentAudio = getAudioElement(audioElements[state.gallery]);\n                  if (currentAudio) {\n                    currentAudio.play()\n                    const targetTime = currentAudio.currentTime - LOOKBACK_ON_SWITCH\n                    currentAudio.currentTime = (targetTime % ITERATION_DURATION) + c * ITERATION_DURATION\n                    dispatch({\n                      type: \"requestIteration\",\n                      iteration: i\n                    })\n                  }\n                }\n                }>\n              </img>\n            </span>\n          )\n        }\n        )}\n        <footer className=\"footer\">\n          <div className=\"gallery-selection\">\n            {GalleryNames.map(([description, gallery]) => (\n              <div className=\"button-wrapper\">\n                <button\n                  key={gallery}\n                  onClick={() => clickGallery(gallery)}\n                  className={`\n                ${state.gallery === gallery ? \"selected\" : \"default\"}\n                ${Gallery[state.gallery]}\n              `}>{description}</button>\n                {gallery === defaultGallery && <span className=\"youarehere\">\n                  YOU ARE HERE\n                </span>\n                }\n              </div>\n            ))}\n          </div>\n          <div>\n            {\n              //Chazen et cetera. 2020.\n            }\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}